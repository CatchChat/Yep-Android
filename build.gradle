apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: "androidsvgdrawable"
apply plugin: 'com.neenbedankt.android-apt'

import fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask

buildscript {
    ext.kotlin_version = '1.0.2'
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'io.fabric.tools:gradle:1.21.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath('fr.avianey.androidsvgdrawable:gradle-plugin:3.0.0') {
            // should be excluded to avoid conflict
            exclude group: 'xerces'
        }
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "catchla.yep"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 5
        versionName "0.9.2"
    }
    productFlavors {
        staging {
            applicationId "catchla.yep.staging"
            versionName = defaultConfig.versionName + ".staging"
            buildConfigField 'String', 'API_ENDPOINT_REST', '"https://park-staging.catchchatchina.com/api/v1/"'
            buildConfigField 'String', 'API_ENDPOINT_FAYE', '"http://faye-staging.catchchatchina.com/faye"'
            buildConfigField 'boolean', 'IS_STAGING', 'Boolean.parseBoolean("true")'
            buildConfigField 'String', 'ACCOUNT_TYPE', '"catchla.yep.staging.account"'
            resValue 'string', 'account_type', 'catchla.yep.staging.account'
            manifestPlaceholders = [AMAP_API_KEY: '04550678c914793570579723fb35da9a']
        }
        production {
            buildConfigField 'String', 'API_ENDPOINT_REST', '"https://api.soyep.com/v1/"'
            buildConfigField 'String', 'API_ENDPOINT_FAYE', '"https://faye.catchchatchina.com/faye"'
            buildConfigField 'boolean', 'IS_STAGING', 'Boolean.parseBoolean("false")'
            buildConfigField 'String', 'ACCOUNT_TYPE', '"catchla.yep.account"'
            resValue 'string', 'account_type', 'catchla.yep.account'
            manifestPlaceholders = [AMAP_API_KEY: '14db11cf0587ed432ea63761c60d937a']
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes.each { buildType ->
        def file = rootProject.file('signing.properties')
        if (file.exists()) {
            def cfg = signingConfigs.maybeCreate(buildType.name)
            loadSigningConfig(cfg, file)
            buildType.signingConfig = cfg
        }
    }

    lintOptions {
        abortOnError false
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

}

repositories {
    jcenter()
    mavenLocal()
    maven { url 'https://s3.amazonaws.com/repo.commonsware.com' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    apt 'com.bluelinelabs:logansquare-compiler:1.3.7'
    apt 'com.hannesdorfmann.parcelableplease:processor:1.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    apt 'com.github.mariotaku.ObjectCursor:processor:0.9.9'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:preference-v7:23.4.0'
    compile 'com.android.support:preference-v14:23.4.0'
    compile 'com.android.support:palette-v7:23.4.0'
    compile 'com.pkmmte.view:circularimageview:1.1'
    compile 'com.github.mariotaku:MessageBubbleView:1.2'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'org.apmem.tools:layouts:1.9@aar'
    compile 'com.commonsware.cwac:merge:1.1.1'
    compile 'com.commonsware.cwac:layouts:0.4.2'
    compile 'me.imid.swipebacklayout.lib:library:1.0.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup:tape:1.2.3'
    compile 'com.squareup:otto:1.3.7'
    compile 'com.bluelinelabs:logansquare:1.3.7'
    compile 'com.rengwuxian.materialedittext:library:2.1.4'
    compile 'com.github.mariotaku:PickNCrop:0.9.3'
    compile 'com.github.mariotaku.RestFu:library:0.9.30'
    compile 'com.github.mariotaku.RestFu:okhttp3:0.9.30'
    compile 'com.github.mariotaku.MediaViewerLibrary:base:0.9.17'
    compile 'com.github.mariotaku.MediaViewerLibrary:subsample-image-view:0.9.17'
    compile 'com.j256.simplemagic:simplemagic:1.6'
    compile 'com.github.mariotaku:SQLiteQB:0.9.7'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.0.9'
    compile 'org.osmdroid:osmdroid-android:4.3'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'com.google.dagger:dagger:2.0.1'
    compile 'com.hannesdorfmann.parcelableplease:annotation:1.0.2'
    compile 'com.davemorrissey.labs:subsampling-scale-image-view:3.5.0'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.7'
    compile 'com.sprylab.android.texturevideoview:texturevideoview:1.0.2'
    compile 'com.pnikosis:materialish-progress:1.7'
    compile 'com.github.mariotaku:jackson-jr-trees:7fe682ee09'
    compile 'org.jdeferred:jdeferred-android-aar:1.2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.github.mariotaku.ObjectCursor:core:0.9.9'
    compile 'com.github.mariotaku:OkFaye:0.9.7'
    compile 'com.hannesdorfmann:adapterdelegates:1.1.0'
    compile 'me.philio:pinentryview:1.0.6'
    compile 'com.github.mariotaku:AbstractTask:0.9.1'
    compile 'com.github.mariotaku.CommonsLibrary:logansquare:0.9.5'
    compile 'com.github.mariotaku.CommonsLibrary:view:0.9.5'
    debugCompile 'com.facebook.stetho:stetho:1.3.1'
    debugCompile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    provided 'javax.annotation:jsr250-api:1.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

task svgToDrawable(type: SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/res-svg/drawable')
    // specify the android res folder
    to = file('src/main/res')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // relative path of the file specifying nine patch specs
    ninePatchConfig = file('src/main/svg-png/9patch.json')
    // output format of the generated resources
    outputFormat = 'PNG'

    outputType = 'drawable'
}

task svgToMipmap(type: SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/res-svg/mipmap')
    // specify the android res folder
    to = file('src/main/res')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // output format of the generated resources
    outputFormat = 'PNG'

    outputType = 'mipmap'
}

def loadSigningConfig(def cfg, def file) {
    Properties signingProp = new Properties()
    signingProp.load(file.newInputStream())
    cfg.setStoreFile(new File((String) signingProp.get('storeFile')))
    cfg.setStorePassword((String) signingProp.get('storePassword'))
    cfg.setKeyAlias((String) signingProp.get('keyAlias'))
    cfg.setKeyPassword((String) signingProp.get('keyPassword'))
}
